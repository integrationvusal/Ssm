<?php	class CategoryController extends Controller {				public static function getTree($request, $vars = Array()) {			$id = 'id';			$data = Array();			$sql = "";			$values = Array();			if (CategoryModel::$multiLang) {				$sql .= " WHERE `lang_id` = '{#1}'";				$values[] = Application::$settings['default_language'];				$id = 'r_id';			}			$sql .= "ORDER BY `order`";			$cm = CategoryModel::find($sql, $values);			$c = count($cm);			for ($i = 0; $i < $c; $i++) {				$data[$i + 1]['id'] = $cm[$i]->$id->value;				$data[$i + 1]['title'] = $cm[$i]->categoryItemTitle->value;				$data[$i + 1]['parentId'] = $cm[$i]->parentId->value;			}			//print_r($data);			echo json_encode($data);		}				public static function addTreeItem($request, $vars = Array()) {						$parentId = isset($_POST['parentId']) ? intval($_POST['parentId']) : 0;						if (isset($_POST['saveItem'])) {				if (CategoryModel::$multiLang) {					$rId = CategoryModel::getLastId(CategoryModel::getTableName());					foreach (Application::$settings['languages'] as $k => $v) {						$cm = new CategoryModel();						$cm->r_id->value = $rId;						$cm->lang_id->value = $k;						$cm->parentId->value = $parentId;						$cm->categoryItemTitle->getSqlData($k);						$cm->hasImage->getSqlData($k);						$cm->categoryItemImage->getSqlData($k);						$cm->categoryItemImageInactive->getSqlData($k);						$cm->save();					}				} else {					$cm = new CategoryModel();					$cm->parentId->value = $parentId;					$cm->categoryItemTitle->getSqlData();					$cm->categoryItemImage->getSqlData();					$cm->hasImage->getSqlData();					$cm->categoryItemImageInactive->getSqlData();					$order = BaseModel::fQuery("SELECT MAX(`order`) as `order_max` FROM `".CategoryModel::getTableName()."`");					$cm->order->value = $order[0]['order_max'] + 1;					$cm->save();				}			}						$menuTitle = "";						$links = "";						$cm = new CategoryModel();						if (CategoryModel::$multiLang) {				foreach (Application::$settings['languages'] as $k => $v) {					$cm->lang_id->value = $k;					$r = $cm->categoryItemTitle->getHTML($k);					$menuTitle .= self::renderTemplate('model' . ds . 'fields' . ds . $r['file'],$r['data'],true);					$r = $cm->hasImage->getHTML($k);					$menuTitle .= self::renderTemplate('model' . ds . 'fields' . ds . $r['file'],$r['data'],true);					$r = $cm->categoryItemImage->getHTML($k);					$menuTitle .= self::renderTemplate('model' . ds . 'fields' . ds . $r['file'],$r['data'],true);					$r = $cm->categoryItemImageInactive->getHTML($k);					$menuTitle .= self::renderTemplate('model' . ds . 'fields' . ds . $r['file'],$r['data'],true);				}			} else {				$r = $cm->categoryItemTitle->getHTML();				$menuTitle .= self::renderTemplate('model' . ds . 'fields' . ds . $r['file'],$r['data'],true);				$r = $cm->hasImage->getHTML();				$menuTitle .= self::renderTemplate('model' . ds . 'fields' . ds . $r['file'],$r['data'],true);				$r = $cm->categoryItemImage->getHTML();				$menuTitle .= self::renderTemplate('model' . ds . 'fields' . ds . $r['file'],$r['data'],true);				$r = $cm->categoryItemImageInactive->getHTML();				$menuTitle .= self::renderTemplate('model' . ds . 'fields' . ds . $r['file'],$r['data'],true);			}												echo self::renderTemplate('model' . ds . 'category-tree-item-action.tpl', Array(				'menuTitle' => $menuTitle,				'parentId' => $parentId,				'id' => '',				'modules' => Application::$modules['admin']['models'],				'action' => 'add',			), true);		}				public static function editTreeItem($request, $vars = Array()) {						$id = isset($_POST['id']) ? intval($_POST['id']) : 0;			$idTitle = (CategoryModel::$multiLang) ? 'r_id' : 'id';						$cm = CategoryModel::find(" WHERE `".$idTitle."` = '{#1}'", Array($id));			if (CategoryModel::$multiLang) {				$c = count($cm);				for ($i = 0; $i < $c; $i++) {					$cm[$cm[$i]->lang_id->value] = $cm[$i];				}			}						$menuTitle = "";						if (CategoryModel::$multiLang) {				foreach (Application::$settings['languages'] as $k => $v) {					$cm[$k]->categoryItemTitle->getSqlData($k);					$cm[$k]->categoryItemImage->getSqlData($k);					$cm[$k]->categoryItemImageInactive->getSqlData($k);					$cm[$k]->hasImage->getSqlData($k);					$r = $cm[$k]->categoryItemTitle->getHTML($k);					$menuTitle .= self::renderTemplate('model' . ds . 'fields' . ds . $r['file'],$r['data'],true);					$r = $cm[$k]->categoryItemImage->getHTML($k);					$r = $cm[$k]->categoryItemImageInactive->getHTML($k);					$r = $cm[$k]->hasImage->getHTML($k);					$menuTitle .= self::renderTemplate('model' . ds . 'fields' . ds . $r['file'],$r['data'],true);					$cm[$k]->save();				}							} else {				$c = count($cm);				for ($i = 0; $i < $c; $i++) {					$cm[$i]->categoryItemTitle->getSqlData();					$cm[$i]->categoryItemImage->getSqlData();					$cm[$i]->categoryItemImageInactive->getSqlData();					$cm[$i]->hasImage->getSqlData();					$r = $cm[$i]->categoryItemTitle->getHTML();					$menuTitle .= self::renderTemplate('model' . ds . 'fields' . ds . $r['file'],$r['data'],true);					$r = $cm[$i]->hasImage->getHTML();					$menuTitle .= self::renderTemplate('model' . ds . 'fields' . ds . $r['file'],$r['data'],true);					$r = $cm[$i]->categoryItemImage->getHTML();					$menuTitle .= self::renderTemplate('model' . ds . 'fields' . ds . $r['file'],$r['data'],true);					$r = $cm[$i]->categoryItemImageInactive->getHTML();					$menuTitle .= self::renderTemplate('model' . ds . 'fields' . ds . $r['file'],$r['data'],true);					$cm[$i]->save();									}			}						echo self::renderTemplate('model' . ds . 'category-tree-item-action.tpl', Array(				'menuTitle' => $menuTitle,				'parentId' => '',				'id' => $id,				'modules' => Application::$modules['admin']['models'],				'action' => 'edit',			), true);		}				public static function removeTreeItem($request, $vars = Array()) {						if (isset($_POST['r_id'])) {				$id = intval($_POST['r_id']);				$idTitle = (CategoryModel::$multiLang) ? 'r_id' : 'id';				$categoryItems = CategoryModel::find(" WHERE `".$idTitle."` = '{#1}'", Array($id));				$c = count($categoryItems);				for ($i = 0; $i < $c; $i++) $categoryItems[$i]->remove();			}					}				public static function sortTree($request, $vars = Array()) {			if (isset($_POST['treeInfo'])) {				$treeInfo = json_decode($_POST['treeInfo']);				$id = CategoryModel::$multiLang ? 'r_id' : 'id';				foreach ($treeInfo as $t) {					if ($t->rId != 0) {						$treeItem = CategoryModel::find(" WHERE `".$id."` = '{#1}'", Array($t->rId));						$c = count($treeItem);						for ($i = 0; $i < $c; $i++) {							$treeItem[$i]->parentId->value = $t->parentId;							$treeItem[$i]->order->value = $t->order;							$treeItem[$i]->save();						}					}				}			}		}		/*		$treeItems = Array();		foreach ($treeInfo as $t) {			if ($t->rId != 0) {				$treeItems[] = CategoryModel::find(" WHERE `".$id."` = '{#1}'", Array($t->rId));			}		}				//sorting		$treeItemsCount = count($treeItems);		for ($i = 0; $i < $treeItemsCount; $i++) {			$itemCount = count($treeItems[$i]);			for ($j = 0; $j < $itemCount; $j++) {				$level = 3;//self::getLevel();				if ($level < CategoryModel::$nestingLevel) {										$treeItems[$i][$j]->parentId->value = $t->parentId;					$treeItems[$i][$j]->order->value = $t->order;					$treeItems[$i][$j]->save();				}			}		}		*/	}?>