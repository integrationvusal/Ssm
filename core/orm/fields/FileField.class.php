<?php	class ModelFileField extends ModelField {                public $name;        public $required;        public $uploadFolder;        public $allowedExtensions;        public $maxFileSize;        public $title;        public $multiLang;				// db settings		public $dbType = 'varchar';		// db settings end		        public function __construct($name, $title, $uploadFolder, $multiLang = false, $common = false, $required = true, $allowedExtensions = Array(), $maxFileSize = 2000000) {            $this->name = $name;            $this->uploadFolder = $uploadFolder;            $this->required = $required;            $this->allowedExtensions = $allowedExtensions;            $this->maxFileSize = $maxFileSize;            $this->title = $title;            $this->multiLang = $multiLang;			$this->common = $common;        }                public function getSqlData($lang = false) {            return $this->getFromPost($lang);        }				public function  getHTML($lang = false) {            return parent::generateHTML('filefield.tpl', $this->value, $lang);        }        private function getFromPost($lang = false) {                        $error = Array(                "success" => false,                "name" => $this->name,            );            $success = Array(                "success" => true,                "name" => $this->name,            );                        $file = $this->getFile($lang);			if ($file == 1) {				$value = $this->getOldFileName($lang);				if ($value != "") {					$success["data"] = $value;					return $success;				} else {                    return $error;				}			}			if ($file == 0) {				$success["data"] = $this->getOldFileName($lang);				return $success;			}						$fileExtension = strrchr($file["name"] ,'.');			if (in_array($fileExtension, $this->allowedExtensions)) {				if ($file["size"] <= $this->maxFileSize) {					$fileName = $this->generateFileName($file["name"]);					$this->deleteOldFile($lang);					$this->upload($file["tmp_name"], $fileName);					$success["data"] = $fileName;					$this->value = $fileName;					return $success;				} else return $error;			} else return $error;			$success["data"] = "undefined";			return $success;        }		        protected function getOldFileName($lang = false) {			$name = 'old_' . $this->name;						if ($this->multiLang && !$this->common) {				if (isset($_POST[$name][$lang]) && !empty($_POST[$name][$lang])) {					$this->value = $_POST[$name][$lang];					return $this->value;				}				else return "empty";			}						if (isset($_POST[$name]) && !empty($_POST[$name])) {				$this->value = $_POST[$name];				return $this->value;			}			else return "empty";		}				protected function getFile($lang = false) {            $file = Array();            if ($this->multiLang) {                if (isset($_FILES[$this->name]) && ($_FILES[$this->name]["error"][$lang] == 0)) {                    $file["name"] = $_FILES[$this->name]["name"][$lang];                    $file["type"] = $_FILES[$this->name]["type"][$lang];                    $file["tmp_name"] = $_FILES[$this->name]["tmp_name"][$lang];                    $file["error"] = $_FILES[$this->name]["error"][$lang];                    $file["size"] = $_FILES[$this->name]["size"][$lang];                } else if ($this->required) return 1;                else return 0;            } else {                if (isset($_FILES[$this->name]) && ($_FILES[$this->name]["error"] == 0)) {                    $file = $_FILES[$this->name];                } else if ($this->required) return 1;                else return 0;            }                        return $file;        }                protected function generateFileName($inputFileName) {            $fileName = md5(date('Y-m-d H:i:s') . rand(1,10000));            $fileDest = "";            for ($i = 0; $i < 3; $i++) {                $fileDest = $fileDest . ds . substr($fileName,$i,1);                if (!is_dir($this->uploadFolder . $fileDest)) {					mkdir($this->uploadFolder . $fileDest, 0777);				}            }            $fileName = $fileDest . ds . $fileName . strrchr($inputFileName,'.');            return $fileName;        }        		protected function deleteOldFile($lang = false) {			$name = "delete-old";			$fileName = "";			if ($this->multiLang) {				if (isset($_POST['delete-old'][$lang])) {					$fileName = $this->getOldFileName($lang);				}			} else {				if (isset($_POST['delete-old'])) {					$fileName = $this->getOldFileName($lang);				}			}			if ($fileName != "") unlink($this->uploadFolder . $fileName);		}		        protected function upload($from, $to) {            move_uploaded_file($from, $this->uploadFolder . $to);        }				    }?>